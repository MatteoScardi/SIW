
@Entity
● Per comunicare al framework che va predisposta una tabella per memorizzare gli oggetti della classe Movie


=======================================================================================================================

@Id
@GeneratedValue(strategy = GenerationType.AUTO)
● Per comunicare al framework che la variabile che segue corrisponde ad una chiave primaria il cui valore deve 
  essere creato automaticamente dal DBMS ogni volta che viene inserita una nuova ennupla Movie


=======================================================================================================================

@Autowired
● Spring utilizza il pattern Dependency Injection per iniettare automaticamente le variabili da cui una classe dipende
● Ci pensa Spring a creare un oggetto MovieRepository e ad assegnarlo alla variabile movieRepository


=======================================================================================================================

Modello
● Mettiamo in una classe del package service i metodi alle operazioni offerte dal sistema
● Diverse soluzioni:
	– una classe per ogni entità
	– un'unica classe con le tutte le operazioni offerte dal sistema
	– una classe per ruolo degli utenti (ad es. professori, studenti, amministrazione)

  
=======================================================================================================================

Service
● Le nostre applicazioni per ora sono molto semplici: I servizi offerti coincidono con operazioni CRUD
● L'implementazione dei metodi delle classi service è quasi sempre una banale invocazione di un metodo
  del repository 


=======================================================================================================================

Repository
● Il pattern Repository viene usato negli approcci Domain Driven Design (DDD)
● I repository sono oggetti che incapsulano la logica necessaria per l'accesso al database
● Favoriscono la manutenibilità del codice disaccoppiando la tecnologia utilizzata per accedere al database dal modello 
  di dominio
● La classe Repository dovrà offrire metodi per le operazioni CRUD (salva, recupera, modifica, cancella) sugli oggetti 
  dalla collezione, più altre funzioni di utilità
  

=======================================================================================================================

Controller
● La responsabilità per la gestione delle richieste viene assegnata ad una classe che nel pattern viene chiamata Controller
● La classe controller è annotata @Controller
● Ogni metodo è annotato con @PostMapping(URL) o @GetMapping(URL) per associare il metodo alla richiesta.
● Possiamo immaginare il Controller come una classe che contiene un metodo Java per ogni richiesta HTTP
	– richiesta HTTP = metodo (GET o POST) + URL
● Ogni metodo del controller:
	– gestisce i dati che arrivano con la richiesta
	– prepara e mette a disposizione della vista i dati necessari a produrre la risposta
	– ritorna una stringa, che corrisponde alla vista che deve essere invocata per la produzione della risposta
	
	
=======================================================================================================================

Thymeleaf: espressioni
● ${...} - Variable expressions: sono simili alle espressioni EL: contengono variabili che sono nel modello o nella sessione
● *{...} - Selection expressions: fanno riferimento ai campi di una variabile definita in uno scope esterno
● #{...} - Message expressions: fanno riferimento a messaggi di testo scritti nei file di messaggi 
● @{...} - Link (URL) expressions: espressioni per costruire riferimenti ipertestuali
● ~{...} - Fragment expressions: espressioni per includere frammenti di template

  
  





















